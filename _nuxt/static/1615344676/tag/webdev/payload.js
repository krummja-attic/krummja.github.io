__NUXT_JSONP__("/tag/webdev", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x){return {data:[{articles:[],notes:[{slug:"2021-03-08-til-in-webdev",description:"Resizable square div",title:o,date:p,tags:[f,q,"css"],toc:[],body:{type:k,children:[{type:b,tag:l,props:{},children:[{type:a,value:"Say you have a parent element of a known width but full or unknown height, and say you want to have a child element that is square and fills the available width of its parent, regardless of the actual value - do the following:"}]},{type:a,value:g},{type:b,tag:"div",props:{className:["nuxt-content-highlight"]},children:[{type:b,tag:"pre",props:{className:["language-scss","line-numbers"]},children:[{type:b,tag:"code",props:{},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:".square "}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"width"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:" auto"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"\n\n  "},{type:b,tag:c,props:{className:[d,r]},children:[{type:b,tag:c,props:{className:[d,"parent","important"]},children:[{type:a,value:"&"}]},{type:a,value:"::after "}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"content"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,"string"]},children:[{type:a,value:"\"\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"display"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:" block"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"padding-bottom"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,"number"]},children:[{type:a,value:"100"}]},{type:b,tag:c,props:{className:[d,"unit"]},children:[{type:a,value:"%"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:t},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:g}]}]}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:"This works a treat!"}]}]},dir:w,path:"\u002Fnotes\u002F2021-03-08-til-in-webdev",extension:n,createdAt:"2021-03-08T18:57:21.112Z",updatedAt:"2021-03-09T20:40:56.818Z"},{slug:"2021-03-09-til-in-webdev",description:x,title:o,date:p,tags:[f,"javascript",q],toc:[],body:{type:k,children:[{type:b,tag:l,props:{},children:[{type:a,value:"Something that I've always wondered about is how websites present or mutate information\u002Fstructure based on the position of the viewport. Well, it turns out that there is a built-in API for this, called the "},{type:b,tag:"a",props:{href:"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FIntersection_Observer_API",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:x}]},{type:a,value:"."}]}]},dir:w,path:"\u002Fnotes\u002F2021-03-09-til-in-webdev",extension:n,createdAt:"2021-03-09T18:47:18.618Z",updatedAt:"2021-03-09T20:36:43.740Z"}],tag:{slug:f,name:f,toc:[],body:{type:k,children:[]},dir:"\u002Ftags",path:"\u002Ftags\u002Fwebdev",extension:n,createdAt:"2021-03-08T19:01:52.341Z",updatedAt:"2021-03-08T19:01:57.757Z"}}],fetch:{},mutations:void 0}}("text","element","span","token","punctuation","webdev","\n","property",":",";","root","p","\n    ",".md","TIL in Web Dev","2020-03-08T00:00:00.000Z","html","selector","{","\n  "," ","}","\u002Fnotes","Intersection Observer API")));